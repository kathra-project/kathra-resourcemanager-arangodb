/* 
 * Copyright 2019 The Kathra Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 *
 *    IRT SystemX (https://www.kathra.org/)    
 *
 */

package org.kathra.resourcemanager.implementation.service;

import org.kathra.core.model.*;
import org.kathra.resourcemanager.apiversion.service.ApiVersionService;
import org.kathra.resourcemanager.component.service.ComponentService;
import org.kathra.resourcemanager.implementationversion.service.ImplementationVersionService;
import org.kathra.resourcemanager.resource.service.AbstractService;
import org.kathra.resourcemanager.implementation.dao.ImplementationDao;
import org.kathra.resourcemanager.resource.service.security.ResourceSecured;
import org.kathra.resourcemanager.resource.service.security.ResourceSecuredAction;
import org.kathra.resourcemanager.resource.service.security.Scope;
import org.kathra.resourcemanager.security.SessionService;
import javassist.NotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Business service managing Implementation
 *
 * Auto-generated by resource-db-generator@1.0.0 at 2019-01-03T13:23:17.419Z
 * @author julien.boubechtoula
 */
@Service
public class ImplementationService extends AbstractService<Implementation,String> {

    @Autowired
    private ImplementationService self = this;
    @Autowired
    ComponentService componentService;
    @Autowired
    ApiVersionService apiVersionService;
    @Autowired
    ImplementationVersionService implementationVersionService;

    public ImplementationService(@Autowired ImplementationDao dao, @Autowired SessionService sessionService) {
        super(dao, sessionService);
    }

    @PostConstruct
    public void init() {
        implementationVersionService.setImplementationService(this);
    }

    @ResourceSecured(action=ResourceSecuredAction.FILTER, scopes = Scope.READ, clazz=Implementation.class, target="output")
    public List<Implementation> getImplementationsByComponent(String componentId) throws Exception {
        Map<String, Implementation> implementations = new HashMap<>();
        Component componentWthApiVersions = componentService.findById(componentId).orElseThrow(() -> new NotFoundException("Unable to find "+componentId));

        for(ApiVersion apiVersion:componentWthApiVersions.getVersions()) {
            List<ImplementationVersion> implementationsVersions = apiVersionService.findById(apiVersion.getId()).get().getImplementationsVersions();
            for(ImplementationVersion implementationVersion : implementationsVersions) {
                Implementation implementation = implementationVersionService.findById(implementationVersion.getId()).get().getImplementation();
                if (!implementations.containsKey(implementation.getId())) {
                    implementations.put(implementation.getId(), implementation);
                }
            }
        }

        for(Implementation implementation : implementations.values()) {
            implementations.replace(implementation.getId(), this.findById(implementation.getId()).get());
        }

        return implementations.values().stream().collect(Collectors.toList());
    }

    @ResourceSecured(action=ResourceSecuredAction.REGISTER, clazz=Implementation.class, target="object")
    public void create(Implementation object) throws Exception {
        super.create(object);
    }

    @ResourceSecured(action=ResourceSecuredAction.UNREGISTER, clazz=Implementation.class, target="object")
    public void delete(Implementation object) throws Exception {
        super.delete(object);
    }

    @ResourceSecured(action=ResourceSecuredAction.VALID, scopes = Scope.UPDATE, clazz=Implementation.class, target="object")
    public void update(Implementation object) throws Exception {
        super.update(object);
    }

    @ResourceSecured(action=ResourceSecuredAction.VALID, scopes = Scope.UPDATE, clazz=Implementation.class, target="object")
    public void patch(Implementation object) throws Exception {
        super.patch(object);
    }

    @ResourceSecured(action=ResourceSecuredAction.FILTER, scopes = Scope.READ, clazz=Implementation.class, target="output")
    public List<Implementation> findAll() throws Exception {
        List<String> ids = self.findAllIdsAuthorized();
        return serviceDao.findAll(ids);
    }

    @ResourceSecured(action=ResourceSecuredAction.VALID, scopes = Scope.READ, clazz=Implementation.class, target="id")
    public Optional<Implementation> findById(String id) throws Exception {
        return super.findById(id);
    }

    @ResourceSecured(action=ResourceSecuredAction.FILTER, scopes = Scope.READ, clazz=Implementation.class, target="output")
    public List<String> findAllIdsAuthorized() throws Exception {
        return super.serviceDao.findAllIdentifiers();
    }
}
