/* 
 * Copyright 2019 The Kathra Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 *
 *    IRT SystemX (https://www.kathra.org/)    
 *
 */

package org.kathra.resourcemanager.component.service;

import org.kathra.core.model.Component;
import org.kathra.resourcemanager.resource.service.AbstractService;
import org.kathra.resourcemanager.component.dao.ComponentDao;
import org.kathra.resourcemanager.resource.service.security.ResourceSecured;
import org.kathra.resourcemanager.resource.service.security.ResourceSecuredAction;
import org.kathra.resourcemanager.resource.service.security.Scope;
import org.kathra.resourcemanager.security.SessionService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

/**
 * Business service managing Component
 *
 * Auto-generated by resource-db-generator@1.0.0 at 2019-01-03T13:23:13.264Z
 * @author julien.boubechtoula
 */
@Service
public class ComponentService extends AbstractService<Component,String> {

    @Autowired
    private ComponentService self = this;

    public final String METADATA_GROUP_IDENTIFIER = "groupId";
    public final String METADATA_GROUP_PATH = "groupPath";

    public ComponentService(@Autowired ComponentDao dao, @Autowired SessionService sessionService) {
        super(dao, sessionService);
    }

    @ResourceSecured(action= ResourceSecuredAction.REGISTER, clazz=Component.class, target="object")
    public void create(Component object) throws Exception {
        if (StringUtils.isEmpty(object.getName())) {
            throw new IllegalArgumentException("Component's name should be defined");
        }
        if (object.getMetadata() == null || object.getMetadata().containsKey(METADATA_GROUP_PATH) == false) {
            throw new IllegalArgumentException("Metadata '" + METADATA_GROUP_PATH+ "' should be defined");
        }
        if (object.getMetadata() == null || object.getMetadata().containsKey(METADATA_GROUP_IDENTIFIER) == false) {
            throw new IllegalArgumentException("Metadata '" + METADATA_GROUP_IDENTIFIER+ "' should be defined");
        }
        super.create(object);
    }

    @ResourceSecured(action= ResourceSecuredAction.REGISTER, clazz=Component.class, target="object")
    public void create(Component object, String groupPath) throws Exception {
        object.putMetadataItem(METADATA_GROUP_PATH, groupPath);
        this.create(object);
    }

    @ResourceSecured(action= ResourceSecuredAction.UNREGISTER, clazz=Component.class, target="object")
    public void delete(Component object) throws Exception {
        super.delete(object);
    }

    @ResourceSecured(action= ResourceSecuredAction.VALID, scopes = Scope.UPDATE, clazz=Component.class, target="object")
    public void update(Component object) throws Exception {
        super.update(object);
    }

    @ResourceSecured(action= ResourceSecuredAction.VALID, scopes = Scope.UPDATE, clazz=Component.class, target="object")
    public void patch(Component object) throws Exception {
        super.patch(object);
    }

    @ResourceSecured(action= ResourceSecuredAction.FILTER, scopes = Scope.READ, clazz=Component.class, target="output")
    public List<Component> findAll() throws Exception {
        List<String> ids = self.findAllIdsAuthorized();
        return serviceDao.findAll(ids);
    }

    @ResourceSecured(action= ResourceSecuredAction.VALID, scopes = Scope.READ, clazz=Component.class, target="id")
    public Optional<Component> findById(String id) throws Exception {
        return super.findById(id);
    }

    @ResourceSecured(action=ResourceSecuredAction.FILTER, scopes = Scope.READ, clazz=Component.class, target="output")
    public List<String> findAllIdsAuthorized() throws Exception {
        return super.serviceDao.findAllIdentifiers();
    }
}
