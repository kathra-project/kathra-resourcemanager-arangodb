/*
 * Copyright (c) 2020. The Kathra Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 *    IRT SystemX (https://www.kathra.org/)
 *
 */

package org.kathra.resourcemanager.apiversion.dao;

import com.arangodb.springframework.annotation.Document;
import com.arangodb.springframework.core.ArangoOperations;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.kathra.core.model.Resource;
import org.kathra.resourcemanager.component.dao.ComponentDb;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;


/**
 * Dao service to manage ApiVersion using ApiVersionDb with ArangoRepository
 *
 * Auto-generated by resource-db-generator@1.0.1 at 2019-04-09T15:31:12.522Z
 * @author julien.boubechtoula
 */
@Service
public class ApiVersionDao extends AbstractApiVersionDao {

    public ApiVersionDao(@Autowired ApiVersionRepository repository, @Autowired ArangoOperations operations){
        super(repository, operations);
    }

    public List<String> findAllByComponentIds(List<String> componentsIds) throws Exception {
        String aqlQuery = " FOR ApiVersions IN " + ApiVersionDb.class.getAnnotationsByType(Document.class)[0].value() + " "+
                        "   FOR edge IN componentApiVersionEdge " +
                        "   FOR Components IN " + ComponentDb.class.getAnnotationsByType(Document.class)[0].value() + " "+
                        "   FILTER  ApiVersions.status != \"" + Resource.StatusEnum.DELETED.toString() + "\" && " +
                        "           CONCAT('" + ApiVersionDb.class.getAnnotationsByType(Document.class)[0].value() + "/',ApiVersions._key) == edge._to && " +
                        "           CONCAT('" + ComponentDb.class.getAnnotationsByType(Document.class)[0].value() + "/',Components._key) == edge._from && " +
                        "           Components._key in " + new ObjectMapper().writeValueAsString(componentsIds) + " "+
                        "   RETURN ApiVersions._key ";
        return StreamSupport.stream(operations.query(aqlQuery, String.class).spliterator(), false).collect(Collectors.toList());
    }
}
