/*
 * Copyright (c) 2020. The Kathra Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 *    IRT SystemX (https://www.kathra.org/)
 *
 */

package org.kathra.resourcemanager.implementationversion.dao;

import com.arangodb.springframework.annotation.Document;
import com.arangodb.springframework.core.ArangoOperations;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.kathra.core.model.ImplementationVersion;
import org.kathra.core.model.Resource;
import org.kathra.resourcemanager.component.dao.ComponentDb;
import org.kathra.resourcemanager.resource.dao.AbstractResourceDao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.kathra.resourcemanager.resource.utils.EdgeUtils;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import javax.annotation.PostConstruct;

import org.kathra.resourcemanager.sourcerepository.dao.SourceRepositoryDb;
import org.kathra.resourcemanager.sourcerepository.dao.SourceRepositoryImplementationVersionEdge;
import org.kathra.resourcemanager.sourcerepository.dao.SourceRepositoryImplementationVersionEdgeRepository;
import org.kathra.resourcemanager.implementation.dao.ImplementationDb;
import org.kathra.resourcemanager.implementationversion.dao.ImplementationVersionImplementationEdge;
import org.kathra.resourcemanager.implementationversion.dao.ImplementationVersionImplementationEdgeRepository;
import org.kathra.resourcemanager.apiversion.dao.ApiVersionDb;
import org.kathra.resourcemanager.implementationversion.dao.ImplementationVersionApiVersionEdge;
import org.kathra.resourcemanager.implementationversion.dao.ImplementationVersionApiVersionEdgeRepository;


/**
 * Dao service to manage ImplementationVersion using ImplementationVersionDb with ArangoRepository
 *
 * Auto-generated by resource-db-generator@1.0.1 at 2019-03-08T09:12:01.526Z
 * @author julien.boubechtoula
 */
@Service
public class ImplementationVersionDao extends AbstractImplementationVersionDao {

    public ImplementationVersionDao(@Autowired ImplementationVersionRepository repository, @Autowired ArangoOperations operations){
        super(repository, operations);
    }

    public List<String> findAllByImplementationIds(List<String> implementationsIds) throws Exception {
        String aqlQuery = " FOR ImplementationVersions IN " + ImplementationVersionDb.class.getAnnotationsByType(Document.class)[0].value() + " "+
                "   FOR edge IN  implementationVersionImplementationEdge " +
                "   FOR Implementations IN " + ImplementationDb.class.getAnnotationsByType(Document.class)[0].value() + " "+
                "   FILTER  ImplementationVersions.status != \"" + Resource.StatusEnum.DELETED.toString() + "\" && " +
                "           CONCAT('" + ImplementationVersionDb.class.getAnnotationsByType(Document.class)[0].value() + "/',ImplementationVersions._key) == edge._from && " +
                "           CONCAT('" + ImplementationDb.class.getAnnotationsByType(Document.class)[0].value() + "/',Implementations._key) == edge._to && " +
                "           Implementations._key in " + new ObjectMapper().writeValueAsString(implementationsIds) + " "+
                "   RETURN ImplementationVersions._key ";
        return StreamSupport.stream(operations.query(aqlQuery, String.class).spliterator(), false).collect(Collectors.toList());
    }
}
