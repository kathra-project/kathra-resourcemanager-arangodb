/*
 * Copyright (c) 2020. The Kathra Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 *    IRT SystemX (https://www.kathra.org/)
 *
 */

package org.kathra.resourcemanager.implementationversion.service;

import org.kathra.core.model.Implementation;
import org.kathra.core.model.ImplementationVersion;
import org.kathra.resourcemanager.apiversion.dao.ApiVersionDao;
import org.kathra.resourcemanager.implementation.service.ImplementationService;
import org.kathra.resourcemanager.resource.service.AbstractService;
import org.kathra.resourcemanager.resource.service.security.ResourceSecured;
import org.kathra.resourcemanager.resource.service.security.ResourceSecuredAction;
import org.kathra.resourcemanager.resource.service.security.Scope;
import org.kathra.resourcemanager.security.SessionService;
import org.kathra.resourcemanager.implementationversion.dao.ImplementationVersionDao;
import org.kathra.resourcemanager.service.ImplementationsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

/**
 * Business service managing ImplementationVersion
 *
 * Auto-generated by resource-db-generator@1.0.0 at 2019-01-09T10:45:31.613Z
 * @author julien.boubechtoula
 */
@Service
public class ImplementationVersionService extends AbstractService<ImplementationVersion,String> {

    ImplementationService implementationService;

    public ImplementationVersionService(@Autowired ImplementationVersionDao dao, @Autowired SessionService sessionService, ImplementationService implementationService) {
        super(dao, sessionService);
        this.implementationService = implementationService;
    }

    public ImplementationService getImplementationService() {
        return implementationService;
    }

    public void setImplementationService(ImplementationService implementationService) {
        this.implementationService = implementationService;
    }

    @Override
    @ResourceSecured(action= ResourceSecuredAction.VALID, scopes = Scope.UPDATE, clazz=Implementation.class, target="object/implementation")
    public void create(ImplementationVersion object) throws Exception {
        super.create(object);
    }

    @Override
    @ResourceSecured(action= ResourceSecuredAction.VALID, scopes = Scope.UPDATE, clazz=Implementation.class, target="object/implementation")
    public void delete(ImplementationVersion object) throws Exception {
        super.delete(object);
    }

    @Override
    @ResourceSecured(action= ResourceSecuredAction.VALID, scopes = Scope.UPDATE, clazz=Implementation.class, target="object/implementation")
    public void update(ImplementationVersion object) throws Exception {
        super.update(object);
    }

    @Override
    @ResourceSecured(action= ResourceSecuredAction.VALID, scopes = Scope.UPDATE, clazz=Implementation.class, target="object/implementation")
    public void patch(ImplementationVersion object) throws Exception {
        super.patch(object);
    }

    @Override
    @ResourceSecured(action= ResourceSecuredAction.FILTER, scopes = Scope.READ, clazz=Implementation.class, target="output/implementation")
    public List<ImplementationVersion> findAll() throws Exception {
        return  super.serviceDao.findAll(findAllIdsAuthorized());
    }

    @Override
    @ResourceSecured(action= ResourceSecuredAction.VALID, scopes = Scope.READ, clazz=Implementation.class, target="output/implementation")
    public Optional<ImplementationVersion> findById(String id) {
        return super.serviceDao.findById(id);
    }

    public List<String> findAllIdsAuthorized() throws Exception {
        return ((ImplementationVersionDao)serviceDao).findAllByImplementationIds(implementationService.findAllIdsAuthorized());
    }
}
