/* 
 * Copyright 2019 The Kathra Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 *
 *    IRT SystemX (https://www.kathra.org/)    
 *
 */

package org.kathra.resourcemanager.library.dao;

import com.arangodb.springframework.core.ArangoOperations;
import org.kathra.core.model.Library;
import org.kathra.resourcemanager.resource.dao.AbstractResourceDao;
import org.kathra.resourcemanager.resource.utils.LeanResourceDbUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.kathra.resourcemanager.resource.utils.EdgeUtils;
import java.util.List;
import java.util.stream.Collectors;
import javax.annotation.PostConstruct;
import fr.xebia.extras.selma.Selma;
import java.util.stream.Stream;

import org.kathra.resourcemanager.component.dao.ComponentDb;
import org.kathra.resourcemanager.library.dao.LibraryComponentEdge;
import org.kathra.resourcemanager.library.dao.LibraryComponentEdgeRepository;
import org.kathra.resourcemanager.libraryapiversion.dao.LibraryApiVersionDb;
import org.kathra.resourcemanager.libraryapiversion.dao.LibraryApiVersionLibraryEdge;
import org.kathra.resourcemanager.libraryapiversion.dao.LibraryApiVersionLibraryEdgeRepository;
import org.kathra.resourcemanager.sourcerepository.dao.SourceRepositoryDb;
import org.kathra.resourcemanager.sourcerepository.dao.SourceRepositoryLibraryEdge;
import org.kathra.resourcemanager.sourcerepository.dao.SourceRepositoryLibraryEdgeRepository;
import org.kathra.resourcemanager.pipeline.dao.PipelineDb;
import org.kathra.resourcemanager.pipeline.dao.PipelineLibraryEdge;
import org.kathra.resourcemanager.pipeline.dao.PipelineLibraryEdgeRepository;


/**
 * Abtrasct dao service to manage Library using LibraryDb with ArangoRepository
 *
 * Auto-generated by resource-db-generator@1.1.1 at 2019-04-12T13:50:58.834Z
 * @author julien.boubechtoula
 */
public abstract class AbstractLibraryDao extends AbstractResourceDao<Library, LibraryDb, String> {

	@Autowired
	LibraryComponentEdgeRepository libraryComponentEdgeRepository;
	@Autowired
	LibraryApiVersionLibraryEdgeRepository libraryApiVersionLibraryEdgeRepository;
	@Autowired
	SourceRepositoryLibraryEdgeRepository sourceRepositoryLibraryEdgeRepository;
	@Autowired
	PipelineLibraryEdgeRepository pipelineLibraryEdgeRepository;


    public AbstractLibraryDao(@Autowired LibraryRepository repository, @Autowired ArangoOperations operations){
        super(repository, operations);
    }

    @PostConstruct
    public void initCollectionIfNotExist(){
        if(repository.count() == 0) {
            try {
                operations.insert(new LibraryDb("init"));
                repository.deleteById("init");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
//init edge repositories 
		this.libraryComponentEdgeRepository.count();
		this.libraryApiVersionLibraryEdgeRepository.count();
		this.sourceRepositoryLibraryEdgeRepository.count();
		this.pipelineLibraryEdgeRepository.count();

    }

    @Override
    public void create(Library object, String author) throws Exception {
        super.create(object, author);
        updateReferences(object);
    }

    @Override
    public void update(Library object, String author) throws Exception {
        super.update(object, author);
        updateReferences(object);
    }
    private void updateReferences(Library object) throws Exception {
        EdgeUtils.of(LibraryComponentEdge.class).updateReference(this.convertResourceToResourceDb(object), "component", libraryComponentEdgeRepository);
        if (object.getVersions() != null) {
            List versionsItemsToUpdate = object.getVersions().stream().map(i -> new LibraryApiVersionDb(i.getId())).collect(Collectors.toList());
            EdgeUtils.of(LibraryApiVersionLibraryEdge.class).updateList(new LibraryDb(object.getId()), versionsItemsToUpdate, libraryApiVersionLibraryEdgeRepository);
        }
        EdgeUtils.of(SourceRepositoryLibraryEdge.class).updateReference(this.convertResourceToResourceDb(object), "sourceRepository", sourceRepositoryLibraryEdgeRepository);
        EdgeUtils.of(PipelineLibraryEdge.class).updateReference(this.convertResourceToResourceDb(object), "pipeline", pipelineLibraryEdgeRepository);

    }


    LibraryMapper mapper = Selma.mapper(LibraryMapper.class);

    public LibraryDb convertResourceToResourceDb(Library object) {
        return mapper.asLibraryDb(object);
    }

    public Library convertResourceDbToResource(LibraryDb object) {
        LeanResourceDbUtils leanResourceDbUtils = new LeanResourceDbUtils();
        return mapper.asLibrary((LibraryDb) leanResourceDbUtils.leanResourceDb(object));
    }

    public Stream<Library> convertResourceDbToResource(Stream<LibraryDb> objectsStream){
        LeanResourceDbUtils leanUtils = new LeanResourceDbUtils();
        return objectsStream.map(i -> (LibraryDb) leanUtils.leanResourceDb(i))
        .collect(Collectors.toList())
        .parallelStream()
        .map(i -> mapper.asLibrary(i));
    }
}
